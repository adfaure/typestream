// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.4
// source: program.proto

package program_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ProgramServiceClient is the client API for ProgramService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProgramServiceClient interface {
	RunProgram(ctx context.Context, in *RunProgramRequest, opts ...grpc.CallOption) (*RunProgramResponse, error)
	GetProgramOutput(ctx context.Context, in *GetProgramOutputRequest, opts ...grpc.CallOption) (ProgramService_GetProgramOutputClient, error)
	CompleteProgram(ctx context.Context, in *CompleteProgramRequest, opts ...grpc.CallOption) (*CompleteProgramResponse, error)
}

type programServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProgramServiceClient(cc grpc.ClientConnInterface) ProgramServiceClient {
	return &programServiceClient{cc}
}

func (c *programServiceClient) RunProgram(ctx context.Context, in *RunProgramRequest, opts ...grpc.CallOption) (*RunProgramResponse, error) {
	out := new(RunProgramResponse)
	err := c.cc.Invoke(ctx, "/program.proto.ProgramService/RunProgram", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *programServiceClient) GetProgramOutput(ctx context.Context, in *GetProgramOutputRequest, opts ...grpc.CallOption) (ProgramService_GetProgramOutputClient, error) {
	stream, err := c.cc.NewStream(ctx, &ProgramService_ServiceDesc.Streams[0], "/program.proto.ProgramService/GetProgramOutput", opts...)
	if err != nil {
		return nil, err
	}
	x := &programServiceGetProgramOutputClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ProgramService_GetProgramOutputClient interface {
	Recv() (*GetProgramOutputResponse, error)
	grpc.ClientStream
}

type programServiceGetProgramOutputClient struct {
	grpc.ClientStream
}

func (x *programServiceGetProgramOutputClient) Recv() (*GetProgramOutputResponse, error) {
	m := new(GetProgramOutputResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *programServiceClient) CompleteProgram(ctx context.Context, in *CompleteProgramRequest, opts ...grpc.CallOption) (*CompleteProgramResponse, error) {
	out := new(CompleteProgramResponse)
	err := c.cc.Invoke(ctx, "/program.proto.ProgramService/CompleteProgram", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProgramServiceServer is the server API for ProgramService service.
// All implementations must embed UnimplementedProgramServiceServer
// for forward compatibility
type ProgramServiceServer interface {
	RunProgram(context.Context, *RunProgramRequest) (*RunProgramResponse, error)
	GetProgramOutput(*GetProgramOutputRequest, ProgramService_GetProgramOutputServer) error
	CompleteProgram(context.Context, *CompleteProgramRequest) (*CompleteProgramResponse, error)
	mustEmbedUnimplementedProgramServiceServer()
}

// UnimplementedProgramServiceServer must be embedded to have forward compatible implementations.
type UnimplementedProgramServiceServer struct {
}

func (UnimplementedProgramServiceServer) RunProgram(context.Context, *RunProgramRequest) (*RunProgramResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunProgram not implemented")
}
func (UnimplementedProgramServiceServer) GetProgramOutput(*GetProgramOutputRequest, ProgramService_GetProgramOutputServer) error {
	return status.Errorf(codes.Unimplemented, "method GetProgramOutput not implemented")
}
func (UnimplementedProgramServiceServer) CompleteProgram(context.Context, *CompleteProgramRequest) (*CompleteProgramResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompleteProgram not implemented")
}
func (UnimplementedProgramServiceServer) mustEmbedUnimplementedProgramServiceServer() {}

// UnsafeProgramServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProgramServiceServer will
// result in compilation errors.
type UnsafeProgramServiceServer interface {
	mustEmbedUnimplementedProgramServiceServer()
}

func RegisterProgramServiceServer(s grpc.ServiceRegistrar, srv ProgramServiceServer) {
	s.RegisterService(&ProgramService_ServiceDesc, srv)
}

func _ProgramService_RunProgram_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunProgramRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProgramServiceServer).RunProgram(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/program.proto.ProgramService/RunProgram",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProgramServiceServer).RunProgram(ctx, req.(*RunProgramRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProgramService_GetProgramOutput_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetProgramOutputRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ProgramServiceServer).GetProgramOutput(m, &programServiceGetProgramOutputServer{stream})
}

type ProgramService_GetProgramOutputServer interface {
	Send(*GetProgramOutputResponse) error
	grpc.ServerStream
}

type programServiceGetProgramOutputServer struct {
	grpc.ServerStream
}

func (x *programServiceGetProgramOutputServer) Send(m *GetProgramOutputResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ProgramService_CompleteProgram_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompleteProgramRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProgramServiceServer).CompleteProgram(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/program.proto.ProgramService/CompleteProgram",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProgramServiceServer).CompleteProgram(ctx, req.(*CompleteProgramRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProgramService_ServiceDesc is the grpc.ServiceDesc for ProgramService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProgramService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "program.proto.ProgramService",
	HandlerType: (*ProgramServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RunProgram",
			Handler:    _ProgramService_RunProgram_Handler,
		},
		{
			MethodName: "CompleteProgram",
			Handler:    _ProgramService_CompleteProgram_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetProgramOutput",
			Handler:       _ProgramService_GetProgramOutput_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "program.proto",
}
